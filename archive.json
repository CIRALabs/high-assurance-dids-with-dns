{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-11-24T00:26:03.897934+00:00",
  "repo": "CIRALabs/high-assurance-dids-with-dns",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 12,
      "id": "I_kwDOLLNO0c5-4YE4",
      "title": "Need way to determine keys and key type used by issuer of DID document",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/12",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In creating the signed did doc, I needed some more information about keys, algorithms, etc. In reviewing the W3C DID spec, I felt it was simpler to adopt JWT conventons of \"header\", \"payload and \"signature\".\r\n\r\nIn the example below you can see how I implemented. I also used the registered claim types defined by JWT.\r\n\r\nIn the did doc, there is now a \"header\" section with \"type\" and \"alg\". In the example below, this is what I put it the header to indicate that I am using a pubkey using the ecdsa signing algorithm. I store this in a TXT record _pubkey.domain.com.\r\n\r\nIn following the JWT convention, I also decided to use the \"signature\" section instead of using \"proof\" section because the necessary information can now be indicated in the \"header\" section, so the \"proof\" information would be redundant.\r\n\r\nIn signing the did doc, I remove the \"header\" section, treat the balance as the \"payload\", generate the signature and add in the resulting \"signature\" section before transmitting the did_doc\r\n\r\nWhen verifying the transmitted did doc. I inspect the header for what I need to do, extract the signature from the signature section, and then remove \"header\" and \"signature \" for verification.\r\n\r\n\r\n\r\n\r\n```bash\r\n{\r\n    \"@context\": [\r\n        \"https://www.w3.org/ns/did/v1\",\r\n        \"https://w3id.org/security/suites/secp256k1recovery-2020\"\r\n    ],\r\n    \"header\": {\r\n        \"typ\": \"pubkey\",\r\n        \"alg\": \"secp256k1ecdsa\"\r\n    },\r\n    \"id\": \"did:web:lncreds.ca:continuumloop\",\r\n    \"iss\": \"did:web:lncreds.ca\",\r\n    \"sub\": \"did:web:lncreds.ca:continuumloop\",\r\n    \"iat\": 1707614608,\r\n    \"exp\": 1707618208,\r\n    \"verificationMethod\": [\r\n        {\r\n            \"id\": \"did:web:lncreds.ca:continuumloop\",\r\n            \"controller\": \"did:web:lncreds.ca:continuumloop\",\r\n            \"type\": \"EcdsaSecp256k1RecoveryMethod2020\",\r\n            \"publicKeyHex\": \"0219a49c1a050ca04fedae9b73f20e58d3985f7a710b954439cd85aeac36882f7c\"\r\n        }\r\n    ],\r\n    \"signature\": \"3045022100db75ad005711de7c3d0cfd7668b0a1e8e6e117eaf444a101f90e8e8191a60ccb0220789598c984297a6b9db4bfc7bf198f385f6477b4f8f1de368786de8573bf9234\"\r\n}\r\n```\r\n\r\nI propose that we use the \"header\" section to indicate how to get the right key for verification. In addition to the pubkey approach I have been using, we need to have an indication for TLSA certificate types and their parameters. Something like:\r\n```bash\r\n\"header\": {\r\n        \"typ\": \"tlsa\",\r\n        \"...\": \"...\"\r\n    },\r\n```\r\nI am not sure what the other header parameters should be yet.\r\n\r\nAlso,  I added in expiry which is similar to TTL (using 3600, or an hour).\r\n\r\nAnyway this issue is intended to capture the discussion.",
      "createdAt": "2024-02-10T20:42:39Z",
      "updatedAt": "2024-02-14T13:06:40Z",
      "closedAt": null,
      "comments": [
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "dicussion with jesse - I think we have resolve by adding header/typ/alg to the did doc. This can be regarded as a did doc 'extension'",
          "createdAt": "2024-02-14T13:06:39Z",
          "updatedAt": "2024-02-14T13:06:39Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "I_kwDOLLNO0c5-9NxI",
      "title": "Proposed Standardized TXT format for certis",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/14",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Proposed standardized way to add public key information in a DNS TXT record\r\nUse the URI scheme, so it can be easily parsed.\r\n\r\nTXT record in the format of ```\"cert:secp256k1/ecdsa?kid=02300d753f822691b63c0c79134aa2069c946768600a3fb32b6078b8209e75d203\"```\r\n\r\nscheme is \"cert\"\r\npath is curve/algoriithm eg.: \"secp256k1/ecdsa\", \"secp256k1/ecdsarecovery\", \"secp256k1/schnorr\", etc,\r\nquery contains parameters, e.g. \"kid\" is hex encoded string of public key.\r\n\r\nThis allows any curve/algorithm to be easily specified, and the urllib library makes it easy to parse out any additional parameters, if required.\r\n\r\nAlso use ```_cert_``` as standardized qualifier. \r\n\r\ncode snippet on how to parse.\r\n\r\n```python\r\n# Example of how to parse a TXT Record\r\nfrom urllib.parse import parse_qs\r\nfrom urllib.parse import urlparse\r\n\r\n# get record from DNS TXT record e;g., _cert.example.com\r\ncertificate_record = \"cert:secp256k1/ecdsa?kid=02300d753f822691b63c0c79134aa2069c946768600a3fb32b6078b8209e75d203\"\r\n\r\nparsed_record = urlparse(certificate_record)\r\nparsed_dict = parse_qs(parsed_record.query)\r\n\r\n# Note that parse_qs returns each parameter as a list, so need to take element [0]\r\n\r\nprint(parsed_record.path)\r\nprint(parsed_dict)\r\npubkey = parsed_dict['kid'][0]\r\n```",
      "createdAt": "2024-02-12T11:53:13Z",
      "updatedAt": "2024-02-12T11:53:14Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 15,
      "id": "I_kwDOLLNO0c5_GdHS",
      "title": "Demonstration of subdomain as root of trust",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/15",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I was successful in deploying a subdomain as a root of trust.\r\n\r\nSee here\r\n\r\nhttps://credentials.trustroot.ca/\r\n\r\nMain steps.\r\n1. create A record to point to deployed instance of sandbox app\r\n2. create _cert.subdomain record with issuer public key material (need to generate keypair for subdomain)\r\n3. add to deployed instance of sandbox app the corresponding private key and subdomain info.\r\n4. update reverse proxy to handle subdomain\r\n5. run certbot to get TLS certificate (note this is for https only - nothing to do with issuance/verification\r\n6. optional: add users/pubkeys that are part of the subdomain root of trust\r\n7. restart deployed instance, use scripts/verify_did.py to confirm and third-party sites such as universalresolver.io to confirm.\r\n\r\nexample of third-party did doc resolution where examplecorp is part of credentials.trustroot.ca\r\n\r\nhttps://dev.uniresolver.io/#did:web:credentials.trustroot.ca:examplecorp\r\n",
      "createdAt": "2024-02-13T14:02:58Z",
      "updatedAt": "2024-02-13T14:04:03Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 16,
      "id": "I_kwDOLLNO0c5_HZHz",
      "title": "Issues to explore resolve",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/16",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Issues to explore/resolve. Some of these might require an \"ask\" from IETF and/or W3C\r\n\r\n1.  DNS record types to support high assurance DIDs\r\n\r\nDID (_did)  type for specifying did:methods to invoke other than the did:web method \r\nDID TLSA for   looking up public key material.\r\nTXT record for looking up other pubkey type.\r\n\r\n\r\n2. Adding \"header\" to DID doc to indicate info needed for verification\r\n\r\ntype for public key type, etc.\r\nalg - for a given public key type, specifying the signing algorithm, etc.\r\n\r\n3. \"signature\" versus \"proof\"\r\n\r\nAccommodate JWT conventions where additional info can be found in header\r\n\r\n4. additional attributes in did doc:\r\n\r\nAs per JWT conventions - \"iat\", \"ext\", \"iss\", etc.\r\n\r\n\r\n\r\n\r\n\r\n",
      "createdAt": "2024-02-13T15:57:10Z",
      "updatedAt": "2024-02-16T14:49:44Z",
      "closedAt": null,
      "comments": [
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "After discussion, this is the proposed approach. I also discovered that many DNS providers do not support URI and/or TLSA records, so relying on those types is a significant path blocker to adoption.\r\n\r\nUse the scoping _did and TXT record to store any public key material (e.g. hex string)\r\n\r\nIn the did document, add a header section like this example:\r\n\r\n```bash\r\nheader = { \r\n\"typ\" = \"dns/did\",\r\n\"alg\" = \"secp256k1ecdsa\"\r\n}\r\n```\r\nSince the issuer knows and has registered the public key for the did doc, it can provide this information within the did doc.\r\n\r\nThe verifier checks the header - ```type=\"dns/did\"`` indicates to look up public key material at  ```_did.domain``` and ```alg=\"secp256k1ecdsa\"``` indicates to use the secp256k1 curve and ecdsa. Therefore the TXT record can be interpeted as a sec256k1 public key. ",
          "createdAt": "2024-02-13T19:02:31Z",
          "updatedAt": "2024-02-13T19:02:45Z"
        },
        {
          "author": "jessecarter111",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Proposed header object: 3 required fields\r\nverificationMethod: Must point to the corresponding verificationMethod used to generate the signature. \r\nalg: A value indicating the crypto-suite used to generate the signature\r\ndnsType: Used to indicate the DNS record type to query (TLSA, CERT, TXT, should be TLSA)\r\nEx:\r\n```javascript\r\n\"header\": {\r\n\"verificationMethod\": \"did:web:example.ca#key-1\",\r\n\"alg\": \"ecdsap256\",\r\n\"dnsType\": \"tlsa\"\r\n}\r\n```\r\n\r\nProposed JWT field inclusions in DID doc: \r\nexp: An expiry date indicating how long a given resolver should cache the DID document/how long that did document is valid for.\r\niat: A date indicating when the current DID document was issued/created.\r\nEx:\r\n```json\r\n{\r\n\"exp\": 2024-03-15T07:09:48.000+0545\r\n\"iat\": 2024-02-15T07:09:48.000+0545\r\n}\r\n```\r\nThere is no need to include the issuer field as that concept is not supported by the DIDs. The relevant parallel is the \"controller\" (https://www.w3.org/TR/did-core/#did-controller) and \"id\" fields  (https://www.w3.org/TR/did-core/#did-subject).",
          "createdAt": "2024-02-15T18:07:16Z",
          "updatedAt": "2024-02-15T18:07:16Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "yeah - that  header format looks good.",
          "createdAt": "2024-02-15T18:09:46Z",
          "updatedAt": "2024-02-15T18:09:46Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": " I implemented \"dnsType\" and made the timestamps ISO format. I still don't believe verificationMethod should be in the header because it is a different concern: the header is just about how the did doc is signed and verified. Verficationmethod is about how it is used for signing and verifying other things (not the did doc) - that became clear when I was generating did docs for users, e.g.,  did:web:trustroot.ca:examplecorp",
          "createdAt": "2024-02-16T14:49:42Z",
          "updatedAt": "2024-02-16T14:49:42Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOLLNO0c5_Nv26",
      "title": "did:web uri enhancements",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/17",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I did a close read of the IETF URI RFC 3986 and concluded that these two versions of a did:web identifier can be regarded as equivalent URNs: \r\n```bash\r\ndid:web:credentials.trustroot.ca:trbouma\r\ndid:web:trbouma@credentials.trustroot.ca\r\n```\r\n\r\nFor mass adoption I see the latter format being more popular and understandable - e.g., Verify me at: ```trbouma@credentials.trustroot.ca```  Note that it is the same static internet identifier (URN) format for email and the same format for lightning addresses. Over time, the mailto: urn got dropped, and I see the same thing happening to \"did:web\" - people will just say, \"you can verify me at trbouma@credentials.trustroot.ca\" and knowing that that context is verification (versue email or payment) whatever scheme will be prepended and whatever routine will resolve to get the necessary did material to do the verification.\r\n\r\nI have implemented in the latest commit of sandbox and have testing in the scripts/verify_did.py",
      "createdAt": "2024-02-14T13:04:59Z",
      "updatedAt": "2024-07-08T20:35:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "andrewwhitehead",
          "authorAssociation": "NONE",
          "body": "'@' is not allowed by the DID syntax for the method-specific-id: https://www.w3.org/TR/did-core/#did-syntax\r\n\r\nIt could be percent-encoded, although it becomes less legible: `did:web:trbouma%40credentials.trustroot.ca`",
          "createdAt": "2024-07-08T20:34:01Z",
          "updatedAt": "2024-07-08T20:35:12Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOLLNO0c5_QWns",
      "title": "Technical prototype enhancements for multi-issuer and subdomain",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/18",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on our meeting this morning, I have generalized the configuration for issuers. The record for each issuer now is\r\n```bash\r\n{\"domain\": \"trustroot.ca\", \"typ\": \"dns/did\", \"alg\": \"secp256k1\",\"privkey\": \"a23..edds\"}\r\n{\"domain\": \"credentials.trustroot.ca\", \"typ\": \"dns/did\", \"alg\": \"secp256k1\",\"privkey\": \"a23..edds\"}\r\n{\"domain\": \"community.trustroot.ca\", \"typ\": \"dns/did\", \"alg\": \"secp256k1\",\"privkey\": \"a23..edds\"}\r\n```\r\nThere should be enough paramaterized info now (typ and alg) to drive the logic to figure out which record types to lookup for signing and verification. I don't think I have the typ value right yet - we'll figure that out when we start incorporating the tlsa/uri record lookups.\r\n\r\nAs you can see from the example, I have stood up another subdomain https://community.trustroot.ca, along with https://credentials.trustroot.ca, and https://trustroot.ca\r\n\r\nThese three represent independent roots of trust (i.e., issuers) as enabled by the service and which could have different assurance level requirements. For example, https://credentials.trustroot.ca could represent the highest bar (TLSA and URI records secured by DNSSEC) and the low bar could be represented by https://community.trustroot.ca for those wishing to have a better assurance but may be limited by the capabilities of their DNS provider only being able to provide TXT records with no DNSSEC.\r\n\r\nAnyway, our goal should be to enable the whole range of requirements, ranging from government to 'community' which I believe, though less secure, is a big incremental improvement over what is available now, and may be ripe for mass adoption.\r\n\r\nFinally, the technical prototype approach (i.e., one single instance to serve them all) also enables us to explore what is required to manage and delegate subdomains and understand what needs to be done to generate zone keys and signing zone files, etc.\r\n\r\n\r\n",
      "createdAt": "2024-02-14T18:59:15Z",
      "updatedAt": "2024-02-14T21:12:04Z",
      "closedAt": null,
      "comments": [
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "Putting my thinking cap on...\r\n\r\nThe \"typ\" field is used in a verify restricted context of JWTs and usually enumerates to \"JWT\" or \"JWS\". \r\n\r\nI would submit that while we can use JWT conventions (they are easy to understand), we are using them in a slightly different context. We many need to introduce \"DID\" as the  \"typ \"value (I am using \"did/dns\" right now because that's all I could think of during prototyping.\r\n\r\nThe typ file can also be used to indicate content, e.g. \"application/json\" - I was thinking about doing something like \"DID/secp256k1\" to indicate different types of DID docs but I think it is good to stick with the simple typ =\"DID\"\r\n\r\nFurther, the alg field should be sufficient to specify whatever else is necessary. We could use what the W3C has been developing, or generation but I think we should keep this separate because the VerificationMethod tells how other documents are to be signed and verified, not the did doc itself. These are two separate concerns that we should not conflate.\r\n\r\nSo I think we keep it simple like:\r\n\r\n```bash\r\n\"header\" : {\r\n\"typ\" : \"DID\"\r\n\"alg\" : \"x.509/tlsa\" or \"secp256k1/ecdsa\" or \"secp256k/schnorr\" or whatever we agree to be supported\r\n}\r\n\r\n``` \r\nWe should also use \"signature\" because it is simple and how to deal with the signature can be determined from \"header\".\r\n\r\nAnd use the other JWT registered claims to meet requirements.\r\n",
          "createdAt": "2024-02-14T21:10:55Z",
          "updatedAt": "2024-02-14T21:12:04Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "I_kwDOLLNO0c5_WLRW",
      "title": "Added online did:web verification",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/19",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Still implementing, but you can see the method in the openapi page:\r\n\r\nhttps://trustroot.ca/docs\r\n\r\nyou can test it against:\r\n```bash\r\ndid:web:trustregistry.ca\r\ndid:web:trustroot.ca\r\ndid:web:trustroot.ca:examplecorp\r\ndid:web:examplecorp@trustroot.ca #Note that this resolves to the equivalent of the above did:web based on the URI RFC\r\ndid:web:credentials.trustroot.ca\r\ndid:web:examplecorp@credentials.trustroot.ca\r\n```\r\n\r\nThe function is not yet complete, as I still need to add in all of the handling and checks. Should be in shortly.\r\n",
      "createdAt": "2024-02-15T13:26:05Z",
      "updatedAt": "2024-02-15T13:26:05Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 20,
      "id": "I_kwDOLLNO0c5_WayH",
      "title": "Rebooting Web of Trust Paper - Beyond did:web",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/20",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I have reviewed this paper. It has a good outline of the issues and believe we can address (have addressed) the main issues. The paper is here:\r\n\r\nhttps://github.com/WebOfTrustInfo/rwot12-cologne/blob/main/final-documents/beyond-did-web.pdf\r\n\r\nAlso, I don't believe we need key pre-rotation (a la KERI) because a similar revocation capability can be implemented using the \"exp\" field. This can be similar to a TTL that you can set (I have set for 3600s) - when you check the did doc, though the signature might check out you fail the verification due to the current_time > \"exp\". That means you need to request a new did doc which (hopefully) has rolled over to a new key.\r\n\r\nIn the end, we don't need to specify a new method beyond ```did:web```, but we do need to specify a series of checks that the did doc must pass before it relied on as a high assurance did. Since relying on a high assurance did doc is the discretion of the relying party, we need to make this as flexible and easy as possible, through \"did doc extensions\", etc.",
      "createdAt": "2024-02-15T13:48:54Z",
      "updatedAt": "2024-03-10T18:12:52Z",
      "closedAt": null,
      "comments": [
        {
          "author": "swcurran",
          "authorAssociation": "COLLABORATOR",
          "body": "We\u2019re working in a similar area (web-based DID Method) and think that several items are needed that go beyond did:web. Wondered about your thoughts on these requirements:\r\n\r\n- Signature across the DIDDoc in the DIDDoc from signature(s) of the DID Controller.\r\n  - This is not in the DIDDoc, but we think needs to be added \u2014 likely as a Data Integrity proof.\r\n- A full history of DIDDoc updates chained together (hash of previous DIDDoc is included in the signature of the new, signature on the new DIDDoc is from the controller keys listed in the previous DIDDoc).\r\n  - The full history is needed so that VCs signed at any time can be verified in the face of DIDDoc updates/key rotations.\r\n  - A mechansim for traversing the history \u2014 ideally including a way to get the full history with a single request.\r\n- The identifier for the DID is derived from the initial DID Document as the starting place of the history using some kind of hash (self-certifying identifier or SCID).\r\n- Pre-rotation for use when private keys are exposed through accidental disclosure or quantum calculation.\r\n  - TTL does not solve these concerns \u2014 do you think it needs to?\r\n  - Ensures (or tries to\u2026) that control of the DID can be retained.\r\n- Use of alsoKnownAs to indicate intended places where equivalent versions of the DIDDoc are published.\r\n- Support for multiple controller DIDs (keys) via the [Verifiable Condition specification](https://www.w3.org/TR/did-spec-registries/#verifiablecondition2021)\r\n  - Defines the threshold/combination of keys needed to authorize an update to the DIDDoc.\r\n ",
          "createdAt": "2024-03-10T18:12:51Z",
          "updatedAt": "2024-03-10T18:12:51Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOLLNO0c5_zkJg",
      "title": "Working protoytype using W3C proof spec",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/21",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "After a discussion with @aniltj , I revisited the W3C Data Integrity Spec and concluded that it can serve our needs instead of the 'more straightforward' JWT approach,  which I was originally advocating for. The primary justification is to embrace what the W3C community has authored rather than trying advocate yet another way to do it. \r\n\r\nAll of the latest code is in this branch: https://github.com/CIRALabs/high-assurance-dids-with-dns/tree/w3c_proof\r\n\r\nYou can see it in action at http://trustroot.ca\r\n\r\nThe resulting did doc looks like below - note that \"header\", \"dsnType\", \"alg\", \"iat\" and \"exp\" are no longer because they can be expressed in the proof as: VerificationMethod {\"type\", :cryptosuite\"} and  Proof {\"created\", \"expires\" }\r\n\r\n```bash\r\n{\r\n  \"@context\": [\r\n    \"https://www.w3.org/ns/did/v1\",\r\n    \"https://w3id.org/security/suites/secp256k1recovery-2020\"\r\n  ],\r\n  \"id\": \"did:web:trustroot.ca\",\r\n  \"sub\": \"did:web:trustroot.ca\",\r\n  \"verificationMethod\": [\r\n    {\r\n      \"id\": \"did:web:trustroot.ca\",\r\n      \"controller\": \"did:web:trustroot.ca\",\r\n      \"type\": \"x509prime256v1\",\r\n      \"publicKeyHex\": \"3059301306072a8648ce3d020106082a8648ce3d03010703420004d50eb242c6fcd1078ae74caf893668543cfaa8d5fb2096b1b7dfc687feafa3527655d0f2ebd86037bd6a80f19405c9cd3947dfdbf1190a8c482f9210ddf2da45\"\r\n    }\r\n  ],\r\n  \"proof\": {\r\n    \"id\": \"did:web:trustroot.ca\",\r\n    \"domain\": \"did:web:trustroot.ca\",\r\n    \"type\": \"DataIntegrityProof\",\r\n    \"created\": \"2024-02-20T11:47:01.466206\",\r\n    \"expires\": \"2024-02-20T12:47:01.466222\",\r\n    \"verificationMethod\": [\r\n      {\r\n        \"id\": \"did:web:trustroot.ca\",\r\n        \"type\": \"tlsa\",\r\n        \"cryptosuite\": \"x509prime256v1\",\r\n        \"controller\": \"did:web:trustroot.ca\",\r\n        \"publicKeyHex\": \"3059301306072a8648ce3d020106082a8648ce3d03010703420004d50eb242c6fcd1078ae74caf893668543cfaa8d5fb2096b1b7dfc687feafa3527655d0f2ebd86037bd6a80f19405c9cd3947dfdbf1190a8c482f9210ddf2da45\"\r\n      }\r\n    ],\r\n    \"proofPurpose\": \"assertionMethod\",\r\n    \"proofValue\": \"e27ab1047d96a63b8a54dfe1c08e98e685f055396ef72bac22029cdb1b1ee1c4ac918b4f9befb6d97c4a7cd1077da4e549c443144cd5e68c64b6326efc59c7ab\"\r\n  }\r\n}\r\n```\r\nThere will still need to be some work to ensure that we can accommodate a wide array of Verification Methods. For example, x509 via openssl can accommodate about 50 different curves and schemes which are all formally specified. You can see above that I am using \"x509prime256v1\" which is a NIST curve, but x509 also supports all of the SECP curves. Further there are barebones schemes that don't use a cert, but just a public key/curve/signing algorithm. \r\n\r\nI also dumped in \"publicKeyHex\" in the proof - it's not necessary, but it's a nice to have extracted from the certificate, just in case you need to verify the DID when offline.\r\n\r\nI also updated the verify_did script (https://github.com/CIRALabs/high-assurance-dids-with-dns/blob/w3c_proof/sandbox/scripts/verify_did.py  It's still pretty ugly, I am still cleaning up.\r\n\r\nFinally, I am documenting how to add a subdomain - the steps to create a high assurance did for a subdomain like https://credentials.trustroot.ca\r\n\r\nThe steps are here: https://github.com/CIRALabs/high-assurance-dids-with-dns/blob/w3c_proof/sandbox/SUBDOMAIN.md\r\n\r\nI am also experimenting with user dids like ```did:web:examplecorp@trustroot.ca``` which I believe can have some profound implications, but I will save that detail for another issue.\r\n",
      "createdAt": "2024-02-20T12:05:00Z",
      "updatedAt": "2024-02-21T13:41:45Z",
      "closedAt": null,
      "comments": [
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "this is the did doc for the user```did:web:trustroot.ca:examplecorp``` or  the more concise '_verifiable web identifier_' version of: ```examplecorp@trustroot.ca```. Note that the proof is same as above (except for different times) but the verificationMethod in the body is different because it relates to the user of the did, in this case excamplecorp, not trustroot.ca\r\n\r\n\r\n```bash\r\n{\r\n  \"@context\": [\r\n    \"https://www.w3.org/ns/did/v1\",\r\n    \"https://w3id.org/security/suites/secp256k1recovery-2020\"\r\n  ],\r\n  \"id\": \"did:web:trustroot.ca:examplecorp\",\r\n  \"sub\": \"did:web:trustroot.ca:examplecorp\",\r\n  \"verificationMethod\": [\r\n    {\r\n      \"id\": \"did:web:trustroot.ca:examplecorp\",\r\n      \"controller\": \"did:web:trustroot.ca:examplecorp\",\r\n      \"type\": \"secp256k1\",\r\n      \"publicKeyHex\": [\r\n        \"e4f7cafa0b271769087b06859917921941c4cea13abe842f379fc9209f367592\"\r\n      ]\r\n    }\r\n  ],\r\n  \"proof\": {\r\n    \"id\": \"did:web:trustroot.ca\",\r\n    \"domain\": \"did:web:trustroot.ca\",\r\n    \"type\": \"DataIntegrityProof\",\r\n    \"created\": \"2024-02-20T12:26:44.870816\",\r\n    \"expires\": \"2024-02-20T13:26:44.870996\",\r\n    \"verificationMethod\": [\r\n      {\r\n        \"id\": \"did:web:trustroot.ca\",\r\n        \"type\": \"tlsa\",\r\n        \"cryptosuite\": \"x509prime256v1\",\r\n        \"controller\": \"did:web:trustroot.ca\",\r\n        \"publicKeyHex\": \"3059301306072a8648ce3d020106082a8648ce3d03010703420004d50eb242c6fcd1078ae74caf893668543cfaa8d5fb2096b1b7dfc687feafa3527655d0f2ebd86037bd6a80f19405c9cd3947dfdbf1190a8c482f9210ddf2da45\"\r\n      }\r\n    ],\r\n    \"proofPurpose\": \"assertionMethod\",\r\n    \"proofValue\": \"4ac9b4ac0d7f8343e7ba50177c9135df17e42d712b0a8967cceabd63c69e0771c954ff87cdc20d5a80ede865b0edcf41fced4a6104555e01471fbd9a3e06e3d5\"\r\n  }\r\n}\r\n```",
          "createdAt": "2024-02-20T12:32:24Z",
          "updatedAt": "2024-02-20T12:33:12Z"
        },
        {
          "author": "aniltj",
          "authorAssociation": "COLLABORATOR",
          "body": "Is the OPTIONAL domain property in the proof used correctly? From the spec (https://www.w3.org/TR/vc-data-integrity/#proofs) >> \"A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating. The specification of the domain parameter is useful in challenge-response protocols where the verifier is operating from within a security domain known to the creator of the proof.\"\r\n\r\nThis implies that the issuer knows the security domain of the verifier, which is not possible here as it could be anyone on the internet who wants to verify.",
          "createdAt": "2024-02-20T12:56:30Z",
          "updatedAt": "2024-02-20T12:56:30Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "@aniltj - not sure. I need to read the spec more closely to see if it is correct. I saw that \"domain\" was a new attribute I hadn't seen before, so I dumped it in without fully understanding it.\r\n\r\nAll said, I am seeing _huge_ potential for someone publishing their _verifiable web identifier_ with a formalized scheme that can optionally support methods for different use cases such as presenting verifiable information that is public, do a challenge and response for authentication, and enabling one-time or many-time requests for selected proofs to reserved audiences by means of providing some sort of proofkey. \r\n\r\nAnyway, further exploration. FWW, I am seeing a massive potential to break away from the 'digital wallet' and 'digital credential' metaphor that we've all been working with so far. I am exploring the different options in that light,",
          "createdAt": "2024-02-20T13:06:43Z",
          "updatedAt": "2024-02-20T13:07:07Z"
        },
        {
          "author": "jessecarter111",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Am supportive of going back to the W3C spec.  Note that the publicKeyHex has been deprecated by W3C (https://www.w3.org/TR/did-spec-registries/#publickeyhex). While the publicKeyHex is a nice convenience, I don't think it is necessary. I think the assumption is the end user has the cryptographic capabilities to do the necessary key conversions. ",
          "createdAt": "2024-02-20T18:59:03Z",
          "updatedAt": "2024-02-20T18:59:03Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok - will remove publickeyhex",
          "createdAt": "2024-02-20T19:30:55Z",
          "updatedAt": "2024-02-20T19:30:55Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "Attempting to implement the W3C data integrity proof spec - a few things don't seem to be right.\r\n\r\nFor the proof verificationMethod - the spec says it has to be a URL (link) to a public key or the cryptographic material - why?? For my implementation I retrieve the material by querying a DNSSEC record (not a website).  I am putting the result of this query as text of the public key instead. This should be changed in the spec.\r\n\r\nThere is an inconsistency - the spec does not have cryptosuite as a field in the prooofs, yet it is in the examples. This is useful, so I added.\r\n\r\nFor the verificationMethods in the body of the doc, the registration https://www.w3.org/TR/did-spec-registries/#publickeyhex seems to be overly restrictive, deprecating methods that are still used by other ecosystems. I propose that they loosen up these requirements to accommodate a broader ecosystem.\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2024-02-20T21:28:34Z",
          "updatedAt": "2024-02-20T21:28:34Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "This is how my resulting proof object looks like. I had to add in \"dnsType\". Also see that the \"verficationMethod\" is the hexstring of the publickey - not a URL\r\n\r\n```bash\r\n  \"proof\": {\r\n    \"id\": \"did:web:trustroot.ca\",\r\n    \"type\": \"DataIntegrityProof\",\r\n    \"dnsType\": \"tlsa\",\r\n    \"proofPurpose\": \"assertionMethod\",\r\n    \"verificationMethod\": \"3059301306072a8648ce3d020106082a8648ce3d03010703420004d50eb242c6fcd1078ae74caf893668543cfaa8d5fb2096b1b7dfc687feafa3527655d0f2ebd86037bd6a80f19405c9cd3947dfdbf1190a8c482f9210ddf2da45\",\r\n    \"created\": \"2024-02-20T22:05:38.451173\",\r\n    \"expires\": \"2024-02-20T23:05:38.451196\",\r\n    \"cryptosuite\": \"x509prime256v1\",\r\n    \"proofValue\": \"7254ed50ef45c4be0bf77e1cfc33d3c91335b28edb976338ce6eb72f12528ca1c84488a766bb4cd0076f146de1ed22c4c31f37c6ac2829769f844bf00af97525\"\r\n  }\r\n```",
          "createdAt": "2024-02-20T22:08:05Z",
          "updatedAt": "2024-02-20T22:08:05Z"
        },
        {
          "author": "jessecarter111",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The verificationMethod just points to an object in the DID doc representing a key pair. \r\nFor the information to be in the DNS, it also has to be a verificationMethod in the DID document. Cross-validating the information across 2 separate domains is an important aspect of the enhanced authenticity, and also provides optionality for the verifier when interacting with the DID document.\r\n\r\nBy not actually pointing to a verificationMethod and instead just using the key material, we make it much more difficult to ascertain the correct keypair, and even make assertions about the key itself.\r\n\r\nI strongly posit that the verificationMethod field should be left as we originally implemented and left as a fragment pointing to a verificationMethod in the DID document. \r\n\r\ni.e:\r\n```json\r\n{\r\n\"verificationMethod\":\"did:web:trustroot.ca#key-1\"\r\n}\r\n```\r\n\r\nIn cases where the DID doc is self signed the use of the verificationMethod URI is intuitive. For a self signed DID document, it just links to another object in the DID document. You already have access to it if you are looking at the proof.\r\n\r\nIt also makes it much more difficult to interact with DID docs that are not self signed. If we aren't pointing to a verificationMethod, figuring who that key belongs to is unnecessarily difficult. \r\n\r\nIn both cases, the user can choose to resolve that key in the DNS to verify or just use the verificationMethod directly.",
          "createdAt": "2024-02-21T03:26:52Z",
          "updatedAt": "2024-02-21T03:26:52Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, I think I am getting it now. The verificationMethod in the \"proof\" is just a pointer to the verificationMethod in the did doc. \r\n\r\nA bit nested and referential for my liking ( read confusing) but I think I am getting it now.... \r\n\r\nSo here is the latest iteration - for verificationMethod for \"id\" I used ```#key-dnstla``` to give a better indication of what it actually is. You will see in \"proof\" this is what I am pointing to. \r\n\r\nI am also still using the ```publicKeyHex``` format as I believe this is a better format for human inspection (it is same format in the DNS TLSA record) and it should not be deprecated because this format is in wide use (especially compressed public key format) in many other ecosystems. The spec should be more accommodating to these formats.\r\n\r\nAnyway, I hope this is correct. Since this did is for trustroot.ca it is 'self-signed'. I will put in the next comment the did doc for a user did - e.g. ```did:web:trustroot.ca:examplecorp```\r\n\r\nThe latest and greatest did doc for ```did:web:trustroot.ca``` is below:\r\n\r\n\r\n\r\n```bash\r\n{\r\n  \"@context\": [\r\n    \"https://www.w3.org/ns/did/v1\",\r\n    \"https://w3id.org/security/suites/secp256k1recovery-2020\"\r\n  ],\r\n  \"id\": \"did:web:trustroot.ca\",\r\n  \"sub\": \"did:web:trustroot.ca\",\r\n  \"verificationMethod\": [\r\n    {\r\n      \"id\": \"did:web:trustroot.ca#key-dnstlsa\",\r\n      \"controller\": \"did:web:trustroot.ca\",\r\n      \"type\": \"x509prime256v1\",\r\n      \"publicKeyHex\": \"3059301306072a8648ce3d020106082a8648ce3d03010703420004d50eb242c6fcd1078ae74caf893668543cfaa8d5fb2096b1b7dfc687feafa3527655d0f2ebd86037bd6a80f19405c9cd3947dfdbf1190a8c482f9210ddf2da45\"\r\n    }\r\n  ],\r\n  \"proof\": {\r\n    \"id\": \"did:web:trustroot.ca\",\r\n    \"type\": \"DataIntegrityProof\",\r\n    \"dnsType\": \"tlsa\",\r\n    \"proofPurpose\": \"assertionMethod\",\r\n    \"verificationMethod\": \"did:web:trustroot.ca#key-dnstlsa\",\r\n    \"created\": \"2024-02-21T13:07:17.100937\",\r\n    \"expires\": \"2024-02-21T14:07:17.100957\",\r\n    \"cryptosuite\": \"x509prime256v1\",\r\n    \"proofValue\": \"c623e566344852a4f4e4f57cf23620c53ca37278604f84e2e57310a5ecddb9389366c0cbfcf1eb4911186b3c6685be492b11aa6a5482130c40c2a6e07227b93b\"\r\n  }\r\n}\r\n```",
          "createdAt": "2024-02-21T13:20:57Z",
          "updatedAt": "2024-02-21T13:20:57Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "And here is the did doc for the user ```did:web:trustroot.ca:examplecorp```\r\n\r\nYou will see in the \"proof\" it is exactly the same as the in the previous case. \r\n\r\nWhat is different in this case (since it is a user did doc) - there are two verification methods - one for the user (examplecorp) to verify anything the user issues  and one for (trustroot) to verify the did doc that trustroot issues (in this case, this did doc, which is indicated in the proof object)\r\n\r\nI hope this is all correct now. The other part I am getting confused is the order and hierarchy of ```verificationMethod```, ```assertionMethod``` and ```DataIntegrityMethod```. It all seems rather complicated, nested and referential. I am sure it's justified but it's taking me time to sort it all out.\r\n\r\n```bash\r\n{\r\n  \"@context\": [\r\n    \"https://www.w3.org/ns/did/v1\",\r\n    \"https://w3id.org/security/suites/secp256k1recovery-2020\"\r\n  ],\r\n  \"id\": \"did:web:trustroot.ca:examplecorp\",\r\n  \"sub\": \"did:web:trustroot.ca:examplecorp\",\r\n  \"verificationMethod\": [\r\n    {\r\n      \"id\": \"did:web:trustroot.ca:examplecorp\",\r\n      \"controller\": \"did:web:trustroot.ca:examplecorp\",\r\n      \"type\": \"secp256k1\",\r\n      \"publicKeyHex\": [\r\n        \"e4f7cafa0b271769087b06859917921941c4cea13abe842f379fc9209f367592\"\r\n      ]\r\n    },\r\n    {\r\n      \"id\": \"did:web:trustroot.ca#key-dnstlsa\",\r\n      \"controller\": \"did:web:trustroot.ca\",\r\n      \"type\": \"x509prime256v1\",\r\n      \"publicKeyHex\": \"3059301306072a8648ce3d020106082a8648ce3d03010703420004d50eb242c6fcd1078ae74caf893668543cfaa8d5fb2096b1b7dfc687feafa3527655d0f2ebd86037bd6a80f19405c9cd3947dfdbf1190a8c482f9210ddf2da45\"\r\n    }\r\n  ],\r\n  \"proof\": {\r\n    \"id\": \"did:web:trustroot.ca\",\r\n    \"type\": \"DataIntegrityProof\",\r\n    \"dnsType\": \"tlsa\",\r\n    \"proofPurpose\": \"assertionMethod\",\r\n    \"verificationMethod\": \"did:web:trustroot.ca#key-dnstlsa\",\r\n    \"created\": \"2024-02-21T13:21:44.666409\",\r\n    \"expires\": \"2024-02-21T14:21:44.666434\",\r\n    \"cryptosuite\": \"x509prime256v1\",\r\n    \"proofValue\": \"599f9187693899094be7261fa02e7093ea249fede7783880d41f57a6d30d4990cdafc5c3519484df00690a525d0774e674759d22e1e7c3fc00217e1498e8743c\"\r\n  }\r\n}\r\n```",
          "createdAt": "2024-02-21T13:29:37Z",
          "updatedAt": "2024-02-21T13:30:35Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "Looking over this overall approach, there are a few things still to sort out.\r\n\r\nIn the proof:\r\n\r\n1.  \"dnsType\" and \"crypotosuite\" are redundant because these can be discerned from the \"verificationMethod\" in this case ```did:web:trustroot.ca#key-dnstlsa```. So these should be removed.\r\n\r\n2. \"type\" is \"DataIntegrityProof\"  - ok, this is a good indicator, but it does not look like it is used a parameter for any lookups.\r\n\r\n3. \"proofPurpose\" is \"assertionMethod\" - not sure how this is used in relation to \"verificationMethod\" - \r\n\r\nI guess I am getting confused because I don't have a clear sense of the underlying data/conceptual model. I will spend some more time reading the specs to sort out",
          "createdAt": "2024-02-21T13:41:44Z",
          "updatedAt": "2024-02-21T13:41:44Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOLLNO0c5_9zPH",
      "title": "Verifiable Web Identifier (urn:vwi) scheme",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/24",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I put together some ideas for a possible proposal. In short, I see the opportunity to abstract the best of did:web methods an dns/dnssec into a generic unifying urn scheme denoted by vwi (verifiable web identifier)\r\n\r\nComments, reactions, welcome!\r\n\r\nhttps://github.com/CIRALabs/high-assurance-dids-with-dns/blob/w3c_proof/sandbox/vwi-scheme.md",
      "createdAt": "2024-02-21T14:33:46Z",
      "updatedAt": "2024-02-21T22:02:26Z",
      "closedAt": null,
      "comments": [
        {
          "author": "darrellodonnell",
          "authorAssociation": "COLLABORATOR",
          "body": "Is there value (now or later) in using a `urn:vid` for Verifiable Identifier?",
          "createdAt": "2024-02-21T14:40:48Z",
          "updatedAt": "2024-02-21T14:40:48Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "I see ```urn:vid``` as an even more general scheme for things that don't use the web at all (IoT devices). I am hoping that we can get ToIP to embrace the concept of a ```urn:vid``` while we work on the more specific scheme of ```urn:vwi```\r\n\r\n",
          "createdAt": "2024-02-21T14:54:34Z",
          "updatedAt": "2024-02-21T14:54:34Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "Anyway, I've noted that many ```urn``` schemes are provisional (for decades) according to IANA. So I am not holding my breath to get any type of approval soon. I figure the proof will be in the pudding if the community likes it or not.",
          "createdAt": "2024-02-21T14:56:50Z",
          "updatedAt": "2024-02-21T14:56:50Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "I added a section on 'embracing what is already built' https://github.com/CIRALabs/high-assurance-dids-with-dns/blob/w3c_proof/sandbox/vwi-scheme.md",
          "createdAt": "2024-02-21T16:46:11Z",
          "updatedAt": "2024-02-21T16:46:11Z"
        },
        {
          "author": "darrellodonnell",
          "authorAssociation": "COLLABORATOR",
          "body": "As I read through the documents I am finding `urn:vid` to be a big distraction. While I agree that the concept here may turn into something else (E.g. `urn:vid` or `vid:web`) for now anyone that is DID-savvy is going to have trouble grokking things. ",
          "createdAt": "2024-02-21T17:28:53Z",
          "updatedAt": "2024-02-21T17:29:02Z"
        },
        {
          "author": "darrellodonnell",
          "authorAssociation": "COLLABORATOR",
          "body": "and our audience is `did:web` savvy people. I recommend leaving the `urn:vid` idea as a small section and look at it in the future.",
          "createdAt": "2024-02-21T17:29:41Z",
          "updatedAt": "2024-02-21T17:29:41Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "@darrellodonnell comment noted. This is still early and still formalizing the concepts and ensuring their rigour.\r\n\r\nAs this evolves, it will likely become simpler and likely another piece will need to be written to communicate this to the did:web folks. But we are not there, yet.",
          "createdAt": "2024-02-21T22:02:24Z",
          "updatedAt": "2024-02-21T22:02:24Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOLLNO0c6AFYaa",
      "title": "Added x509 support for user dids",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/25",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I added x509 support for user dids in this branch\r\n\r\nhttps://github.com/CIRALabs/high-assurance-dids-with-dns/tree/x509_user\r\n\r\nI have deployed the code and have it running at https://trustroot.ca\r\n\r\nI added some user setup instructions at the end of this doc\r\n\r\nhttps://github.com/CIRALabs/high-assurance-dids-with-dns/blob/x509_user/sandbox/SUBDOMAIN.md\r\n\r\nSo far it is only for two users - trbouma and examplecorp.  you can see how examplecorp resolves at: https://dev.uniresolver.io/#did:web:trustroot.ca:examplecorp\r\n\r\n\r\nIf you look in the verificationMethod, you can see a \"x509\" attribute - that is where I dumped in the x509 public key to show that it works.\r\n\r\nAnyway, there is still some work to be done on how everything should be expressed in the did doc, but all of the binding mechanisms work. Also, the users in the technical prototype work across all subdomains, so examplecorp shows up in the credentials and community subdomains as well. A real system wouldn't do this of course, but this is to make it easy to leverage the same user data across different domains for demonstration purposes.\r\n",
      "createdAt": "2024-02-22T11:53:30Z",
      "updatedAt": "2024-02-22T11:53:30Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 27,
      "id": "I_kwDOLLNO0c6BbipM",
      "title": "Scoped out Verifiable Web Identifiers",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/27",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Hi everyone,\r\n\r\nI will leave the repo material that I have so far developed on ```verifiable web identifiers```, but I now consider it to be out of scope for this specific project.\r\n\r\nI have spun up a separate repo under my own account: https://github.com/trbouma/vwi/ and will continue working on it there.\r\nAs I described, this is a more generic scheme that is enabled by ```did:web``` but also some other decentralized ecosystems that I am involved in, namely ```nostr``` at https://github.com/nostr-protocol/nips\r\n\r\nAnyway, if you have any questions/concerns let me know.\r\n\r\n\r\n\r\n\r\n\r\n",
      "createdAt": "2024-03-06T13:11:08Z",
      "updatedAt": "2024-03-06T13:11:08Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 28,
      "id": "I_kwDOLLNO0c6BzzJ5",
      "title": "Clarifications about the Internet Draft document",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/28",
      "state": "OPEN",
      "author": "swcurran",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "These comments are from reading the document [draft-ietf-high-assurance-dids-with-dns.md](https://github.com/CIRALabs/high-assurance-dids-with-dns/blob/main/draft-ietf-high-assurance-dids-with-dns.md). The links in the README.md did not resolve \u2014 at least for me.\r\n\r\nThe examples in the specification could use additional detail. Notably \u2014 what do the values in the URI and TLSA records mean? I was not clear on the relationship between the DIDs in the example, and those DNS records \u2014 particularly for the TLSA records.\r\n\r\nThe spec. reads (at least to me) as if the \u201cusual case\u201d will be for the DIDDocs to be at the domain level \u2014 e.g. with the did:web referencing the domain, and thus, the DIDDoc in the .well-known path. I think that the common case will be that the DIDDoc will be in a sub-domain or path, and that having the DIDDoc at the domain level will be a rare case. An organization will have multiple \u2014 perhaps many \u2014 DIDs (especially if there are employee level DIDs as discussed in some of the issues in this repo), and so the common case will be that the DIDs are not at the domain level. I think should be reflected in the specification.",
      "createdAt": "2024-03-10T18:24:47Z",
      "updatedAt": "2024-03-16T12:28:06Z",
      "closedAt": null,
      "comments": [
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "Most likely a did:web will be resolved at a subdomain leve having its own did. That is what I am experimenting with in the prototype, e.g.,\r\n\r\ndid:web:trustroot.ca, did:web:credentials.trustroot.ca, and did:web:community.trustroot.ca all resolve to different dids.\r\n\r\nAs well, I am experimenting with did:web that have a local part - e.g., did:web:trbouma@credentials.trustroot.ca - resolves to a did that is specific to a user.",
          "createdAt": "2024-03-16T12:28:05Z",
          "updatedAt": "2024-03-16T12:28:05Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "I_kwDOLLNO0c6B0Yqt",
      "title": "Verification process in the internet draft",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/29",
      "state": "OPEN",
      "author": "swcurran",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The following are comments/questions from reviewing the [Verification Process](https://github.com/CIRALabs/high-assurance-dids-with-dns/blob/main/draft-ietf-high-assurance-dids-with-dns.md#verification-process) in the Internet Draft.\r\n\r\n1. The first step needs to be clarified as to whether it is refering to a DID (such as might be received in a VC) or a DIDDoc (such as would be returned in resolving a DID).  The words say a DIDDoc, but the example is a DID.\r\n2. A `did:web` may not be associated with a the domain of a DID. For example, it is quite easy to create a DID that is published in a repository on GitHub, where the publisher (the DID\u2019s controller) does not control the domain.  Further, in such DIDs, the domain is not the \u201clast segment\u201d of a DID as the text indicates. The domain is only the last segment in the special case of a `did:web` where the identifier is a domain. I think that will be in a minority of cases.\r\n3. I think the more general case is to assume that in step 1, the DIDDoc is resolved, and that the domain linkage (if any) is in the DIDDoc itself. Then, in the special case of a `did:web` DID that references a domain name, the DIDDoc resolution MAY be skipped.\r\n4. I think that step 3 needs a lot more detail \u2014 defining how the comparison between a verification method (which one(s)?) and the TLSA record(s) is carried out. For example, is it the full `verificationMethod` data that is checked, or just the key type and public key that is matched?\r\n5. Given that in step 3, the `verificationMethod` and the TLSA records are found to match, how does is the level of assurance changed when using the TLSA method in verifying the DIDDoc proof item? I\u2019m wondering if I\u2019m not understanding something in the text.\r\n\r\nA general question about this is how the DID controller keeps the TLSA record and the DIDDoc in sync. Presumably, there is a period when the two are out of sync as they cannot both be updated in a transaction. Is there a way to detect and compensate for that?  In the Web-based DID Method we are considering, DIDDoc version is crucial to enable detect what version of a DID was used in signing something (such as a VC). Versioning could help in dealing with expected \u201cout of sync\u201d scenarios between the DIDDoc and the TLSA record.",
      "createdAt": "2024-03-11T00:32:22Z",
      "updatedAt": "2024-03-18T14:17:52Z",
      "closedAt": null,
      "comments": [
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "I am wondering, does a did doc, once a data integrity proof is added, become a verifiable credential, and therefore subject to the W3C Verifiable Credential Recommendation.?\r\n\r\nCould a did doc be in the format of a SD JWT, or any JSON with a signature? I am inclined to make this as open as possible?\r\n\r\nIn your second question, where a did:web might not control the domain (such as GitHub) but they would need to the controller of a subdomain zone at least e.g., did:web:user.github.io\r\n\r\nFor Q4 - I don't think we have this all worked out yet. Lots of questions and insights are coming from building the prototype. More to come.\r\n\r\nFor Q5. We are purpose leaving how levels of assurance are defined to the trust framework providers. We are providing a table on how the series of verification checks, once passed, might map to levels of assurance, but it is the trust framework providers who must formalize that determination and mapping to their assurance models.\r\n",
          "createdAt": "2024-03-16T12:22:34Z",
          "updatedAt": "2024-03-16T12:22:52Z"
        },
        {
          "author": "swcurran",
          "authorAssociation": "COLLABORATOR",
          "body": "On your question of whether a DID Doc with a DI proof is a VC, I would say no. I think there is a reason for the DI spec being separate from the VC-DI spec (using a DI in the case of a VC) \u2014 a VC-DI is a special case of a DI.\r\n\r\nIt does make sense that in the linkage of a did:web and DNS, that the controller must control both the DID keys and the DNS entry. That reduces my point to the obvious one that did:web\u2019s suitable for this practice are a subset of all possible did:webs.  Domain/subdomain DIDs are all did:web, but not the reverse.",
          "createdAt": "2024-03-18T13:29:44Z",
          "updatedAt": "2024-03-18T13:29:44Z"
        },
        {
          "author": "swcurran",
          "authorAssociation": "COLLABORATOR",
          "body": "Happy to close this if you think there has been sufficient use from it.",
          "createdAt": "2024-03-18T13:30:17Z",
          "updatedAt": "2024-03-18T13:30:17Z"
        },
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "@swcurran - I agree - the DID Doc-DI spec should be separate from the VC-DI spec. I'd go one step further and allow the DID Doc-ID spec use other formats that are not W3C Recommendations, such as a signed JWT. Personally, I find the W3C DID Doc spec a little too complex for my liking. For sure, it does a lot of things and has flexibility, but it takes awhile to get your head wrapped around it. Anyway, my opinion only, as I see other ecosystems that would like to take advantage of this approach without necessarily adopting all of the W3C structural sugar.\r\n\r\nIn the end, irrespective of standards and exactly how it is implemented, it boils down to the controller of the did:web having control of the: 1) web server (including signing keys),  2) dns records, and 3) keys to sign the dns records (dnssec). \r\n\r\nWhen all three of these controls are properly delegated and implemented, it is pretty secure, \r\n",
          "createdAt": "2024-03-18T14:17:51Z",
          "updatedAt": "2024-03-18T14:17:51Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "I_kwDOLLNO0c6Ch7hC",
      "title": "Demo app with latest",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/30",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I incorporated the latest code so https://trustroot.ca passes the verify.py script, as does https://trustregistry.ca\r\n\r\nThe code is at this branch\r\n\r\nhttps://github.com/CIRALabs/high-assurance-dids-with-dns/tree/review-02-26-2024-app-enhancements \r\n\r\nIt's little more than hack-in at the moment. You can see the did doc directly at:\r\n\r\nhttps://trustroot.ca/.well-known/did.json",
      "createdAt": "2024-03-16T11:54:30Z",
      "updatedAt": "2024-03-18T13:58:27Z",
      "closedAt": null,
      "comments": [
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "I got the verification working - the latest in the app is merged into \r\n\r\nhttps://github.com/CIRALabs/high-assurance-dids-with-dns/tree/review-02-26-2024",
          "createdAt": "2024-03-18T13:58:25Z",
          "updatedAt": "2024-03-18T13:58:25Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOLLNO0c6C-Z3b",
      "title": "-dnstxt option for verify.py",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/31",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I deployed another domain name I had https://openproof.org - It's all working save for the dns/dnssec validation because I am using rebel.ca and I cannot add URI and TLSA records. I can switch this to desec.io, but I've decided to leave at rebel and implement a -dnstxt verification option, where a domain owner can add the TXT records and have them verified. I know this might not be considered the most secure option, but for mass adoption, this control is likely just fine for commerical operators. I should have the script done by end of day today, or tomorrow.",
      "createdAt": "2024-03-20T12:19:56Z",
      "updatedAt": "2024-03-20T12:19:57Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 35,
      "id": "I_kwDOLLNO0c6KRmHx",
      "title": "Using this with did:tdw \u2014 Trust DID Web",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/35",
      "state": "OPEN",
      "author": "swcurran",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A team at BC Gov has been working on what might be considered an extension to DID Web that we\u2019re calling Trust DID Web (did:tdw) \u2014 links below. The <tl;dr> is that did:tdw is a file that resides beside a did:web \u201cdid.json\u201d file on a web server that is a log with a record per version of the DID. The log enables (at least) the following features:\r\n\r\n- Ongoing publishing of all DID Document (DIDDoc) versions for a DID instead of, or alongside a did:web DID/DIDDoc.\r\n- The same DID-to-HTTPS transformation as did:web.\r\n- The ability to resolve the full history of the DID using a verifiable chain of updates to the DIDDoc from genesis to deactivation.\r\n- A self-certifying identifier (SCID) for the DID that is globally unique, embedded in the DID, and derived from the initial DIDDoc.\r\n   - The SCID enables [DID portability](https://bcgov.github.io/trustdidweb/#term:did-portability), such as moving the DID\u2019s web location (and so changing the DID string itself) while retaining a connection to the predecessor DID(s) and the DID\u2019s verifiable history.\r\n- DIDDoc updates include a proof signed by the DID Controller(s) authorized to update the DID.\r\n\r\nWe\u2019d like to include in the did:tdw spec how to use High Assurance DIDs with did:tdw. Going through this specification I see a couple of things that raise questions:\r\n\r\n- As we have defined did:tdw, the SCID may be the sub-domain in the DID, or may be in the path under the domain, as is supported in did:web.  There is no reference to that in the High Assurance DIDs spec. Have you considered that use case and is it supported?\r\n- did:tdw includes the same idea of a data integrity proof in the log file (vs. in the DIDDoc) of the DID, since that is not a DID Core spec concept (AFAIK?).  Can you think of how that might be made optional if it is not needed?\r\n\r\nWe\u2019d love to have a meeting with you to talk about did:tdw and how it might connect with this work if there is interest.\r\n\r\ndid:tdw links:\r\n\r\n- did:tdw Specification (rendered): https://bcgov.github.io/trustdidweb/\r\n- did:tdw Specification (repository): https://github.com/bcgov/trustdidweb\r\n- Presentation from IIW 38 (April 2024). The details start at slide 11: https://docs.google.com/presentation/d/1PHo16asyceRiNKN7UkV8BSmtWtN6Wp3A6_9MV0IQ2jg/edit?usp=sharing\r\n- Typescript Implementation: https://github.com/bcgov/trustdidweb-ts\r\n- Python Implementation: https://github.com/bcgov/trustdidweb-py\r\n",
      "createdAt": "2024-05-27T23:01:26Z",
      "updatedAt": "2024-05-27T23:01:26Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 36,
      "id": "I_kwDOLLNO0c6OAVHR",
      "title": "Cryptographic Link between DID <> DIDdoc <> Domain",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/36",
      "state": "OPEN",
      "author": "aniltj",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I was re-reading these sections of the spec/recipe:\r\n\r\n>By leveraging URI records as outlined ...., we can create a bidirectional relationship, allowing \r\n>a domain to publish their associated DID in the DNS.\r\n\r\nWhich allows a DID \"owned\" by a domain to published via that domain's URI record, and ...\r\n\r\n>By hosting the public keys of that DID in its associated domain\u2019s zone, \r\n>we can provide a cryptographic linkage to bolster this relationship \r\n>while also providing access to the DID\u2019s public keys outside of the infrastructure \r\n>where the DID document itself resides, facilitating interoperability and increasing availability.\r\n\r\nWhich allows the public keys associated with the DID, and available in a **digtially signed DIDDoc** to also be available via the domain's TLSA record.\r\n\r\nThe digital signature on the DIDdoc (available in the /.well-known of the domain) ensures the integrity and provenance of:\r\n\r\n- The DID published in the DIDdoc\r\n- The public keys associated with the DID published in the DIDdoc\r\n- Additional metadata published in the DIDDoc\r\n\r\n>The data integrity proof SHOULD be signed using a verificationMethod that has an \r\n>associated TLSA record to allow for the verification of the data integrity proof using pki \r\n>material contained outside of the DID document. This provides an added layer of \r\n>authenticity, as the PKI information contained in the DID document would need to \r\n>be repudiated across 2 different domains, the resource hosting the DID document and its associated DNS domain.\r\n\r\nThe question I have is why the extra step of actually publishing the DID's public key's via the TLSA record? \r\n\r\nWould it not be simpler to only publish in the TLSA record the public key associated with the digital signature on the DIDdoc?\r\n\r\n1. The URI record that points to the same DID that is present in the DIDdoc is the \"second factor\". \r\n2. In order to validate the digital signature on the DIDDoc, you need to obtain the public key from the TLSA record which is protected using DNSSEC. \r\n3. W3C Data Integrity, which is used to digitally sign the DIDDoc, can utilize existing PKI infrastructure. \r\n\r\nThe ability to cryptographically link together existing DNS/DNSSEC, PKI and DIDs becomes very powerful way of linking existing trusted infrastructure (DNS/DNSSEC, PKI) with DIDs  \r\n\r\n\r\n",
      "createdAt": "2024-06-30T21:20:56Z",
      "updatedAt": "2024-06-30T21:24:01Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 37,
      "id": "I_kwDOLLNO0c6O2SU7",
      "title": "Support DID resolution parameters?",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/37",
      "state": "OPEN",
      "author": "andrewwhitehead",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In order to restrict the resolution of the associated DID, it may be useful to support DID resolution parameters in the _did subdomain URI record. This would change the URI field from a DID to a DID-URL, meaning that a resolver would be expected to strip off any parameters to discover the base DID. As a motivating example, the following syntax could be used to attach a hashlink to the DID-URL and provide some integrity protection over the resulting document:\r\n\r\n    did:web:domain.example?hl={hash}\r\n\r\nFor use with `did:tdw`, it would also be beneficial to define a minimum version ID (and hash) to resolve, such that the log file can't be rolled back past a certain point without breaking the resolution process.",
      "createdAt": "2024-07-08T21:20:34Z",
      "updatedAt": "2024-07-08T21:21:24Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 38,
      "id": "I_kwDOLLNO0c6O2VMQ",
      "title": "Undefined DID document properties",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/38",
      "state": "OPEN",
      "author": "andrewwhitehead",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current draft refers to a couple properties \u2013 `dnsDomain` and `proof` \u2013\u00a0which are not defined by the DID Core 1.0 syntax. There's also a `header` property mentioned in other issues. In order to produce a JSON-LD conforming document an additional context would need to be defined and referenced by DID documents, for example:\r\n\r\n```json\r\n{\r\n  \"@context\": [\r\n    \"https://www.w3.org/ns/did/v1\",\r\n    \"https://domain.example/high-assurance-did/v1\"\r\n  ],\r\n  \"id\": \"did:web:example.com\",\r\n  ...\r\n}\r\n```\r\n\r\nOtherwise, these properties could be proposed for addition to the core spec (although not at the current stage of the working group). They could also be proposed for individual DID methods, particularly did:web.",
      "createdAt": "2024-07-08T21:27:43Z",
      "updatedAt": "2024-07-08T21:28:12Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 42,
      "id": "I_kwDOLLNO0c6P7YSF",
      "title": "Replace XXXX in the example in section 3.1",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/42",
      "state": "CLOSED",
      "author": "swcurran",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The example in [Section 3.1](https://github.com/CIRALabs/high-assurance-dids-with-dns/blob/main/draft-carter-high-assurance-dids-with-dns.md#mapping-dids-to-domains-with-uri-records) uses \"did:web:XXXXXX\u201d vs. matching the DID web to the DNS entry.  Later examples in the next sub-section do match the did and domain.  I don\u2019t see why this shouldn\u2019t as well.",
      "createdAt": "2024-07-17T22:17:31Z",
      "updatedAt": "2024-07-22T16:46:07Z",
      "closedAt": "2024-07-22T16:46:07Z",
      "comments": []
    },
    {
      "number": 43,
      "id": "I_kwDOLLNO0c6QFBdN",
      "title": "Verification Method - history?",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/43",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Since verificationMethod can support an array, I am wondering if we can add a property to indicate which is current, and which has expired. This way it is possible to have a verification history if someone needs to verify an older doc with the key that was valid at the time.\r\n\r\nSee example below: A new \"id\" has been added, and the old \"id\" has an \"expires\" attribute.\r\n\r\n\r\n\r\n```\r\n\"verificationMethod\": [\r\n     {\r\n      \"id\": \"did:web:trustroot.ca#key-2\",\r\n      \"type\": \"Ed25519VerificationKey2018\",\r\n      \"controller\": \"did:web:trustroot.ca\",\r\n      \"publicKeyJwk\": {\r\n        \"crv\": \"Ed25519\",\r\n        \"x\": \"wwCkQ_BCdECskL2oW0-XiWh5Vkp6tkm5dvp9Ff6vwiU\",\r\n        \"kty\": \"OKP\"\r\n      }\r\n    ,\r\n    {\r\n      \"id\": \"did:web:trustroot.ca#key-1\",\r\n      \"type\": \"Ed25519VerificationKey2018\",\r\n      \"controller\": \"did:web:trustroot.ca\",\r\n      \"publicKeyJwk\": {\r\n        \"crv\": \"Ed25519\",\r\n        \"x\": \"wwCkQ_BCdECskL2oW0-XiWh5Vkp6tkm5dvp9Ff6vwiU\",\r\n        \"kty\": \"OKP\"\r\n      },\r\n     \"expires\": \"2024-07-18...\"\r\n    }\r\n  ]\r\n```",
      "createdAt": "2024-07-18T19:40:24Z",
      "updatedAt": "2024-07-18T19:40:25Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 44,
      "id": "I_kwDOLLNO0c6QtpHk",
      "title": "Add DID into subject alternative name for X509 cert?",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/44",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Could this be an additional control added in for X509 certificate issuance Adding the did:web into the Subject Alternative Name? \r\n\r\nSee example below with the URI added.\r\n\r\nThis could be checked to make extra sure that the X509 cert is issued specifically in relation to be used for the DID\r\n\r\n\r\n```\r\n\r\nSubject Alternative Name:\r\n  DNS:www.example.com,\r\n  DNS:example.com,\r\n  DNS:shop.example.com,\r\n  IP:192.0.2.1,\r\n  email:admin@example.com,\r\n  URI:did:web:example.com\r\n\r\n```\r\n",
      "createdAt": "2024-07-24T15:29:07Z",
      "updatedAt": "2024-07-24T15:29:07Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 45,
      "id": "I_kwDOLLNO0c6XamWu",
      "title": "normative references cannot be expired or expireing",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/issues/45",
      "state": "OPEN",
      "author": "TomCJones",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "To get thru review you will need to clean up normative references.\r\n[RFC6698] Has several refs on it to updates - you need to see if the updates apply to this document\r\n[DID-in-the-DNS] is expired - does that matter - if so you will become normative - to keep this move to informative\r\n[wellKnownDidConfiguration] - is this really normative? it doesn't sound like a spec (may apply to others)\r\n",
      "createdAt": "2024-09-21T14:49:37Z",
      "updatedAt": "2024-09-21T14:50:28Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOLLNO0c5luH_z",
      "title": "Rough Draft",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/1",
      "state": "MERGED",
      "author": "jessecarter111",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "trbouma",
        "jacqueslatour"
      ],
      "labels": [],
      "body": "Rough draft\r\n\r\nFocus is getting all of the technical details down and adding on top of what was in the initial draft. Also removed all the trust registry references, which will be kept in the other draft.\r\n",
      "createdAt": "2024-02-01T16:08:32Z",
      "updatedAt": "2024-02-05T15:55:20Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "e8ce70fbb2d9898fd1851c71c4b819a738ee950f",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "initial-draft",
      "headRefOid": "23424d0c2c7049104df9088f474e7a54403fe7d1",
      "closedAt": "2024-02-05T15:04:19Z",
      "mergedAt": "2024-02-05T15:04:19Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "91193b6cb52e4da3c6003f45f28a8614d3127fdd"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 2,
      "id": "PR_kwDOLLNO0c5lu6T6",
      "title": "This is a test pull request",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/2",
      "state": "CLOSED",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "just testing - can be closed.",
      "createdAt": "2024-02-01T17:59:49Z",
      "updatedAt": "2024-02-01T18:28:05Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "e8ce70fbb2d9898fd1851c71c4b819a738ee950f",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "tims-edits",
      "headRefOid": "4d0443aa3a52c561d0a7dff929c8fded670d8eb5",
      "closedAt": "2024-02-01T18:28:05Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 3,
      "id": "PR_kwDOLLNO0c5l4Vaz",
      "title": "added requirements and level sections",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/3",
      "state": "MERGED",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "added sections in doc",
      "createdAt": "2024-02-02T21:26:23Z",
      "updatedAt": "2024-02-07T03:28:36Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "43c9da3ffd27b5a2ebd3fe3aec72c5ada3051b99",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "additions",
      "headRefOid": "de2d187fcc1875aedf3f60a89dbd1e626499e53e",
      "closedAt": "2024-02-05T16:21:15Z",
      "mergedAt": "2024-02-05T16:21:15Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "7a2015c68f6c50ec45b07985fe1e5b92dc6b3054"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLLNO0c5vC56v",
          "commit": {
            "abbreviatedOid": "13854cf"
          },
          "author": "jessecarter111",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-05T15:03:14Z",
          "updatedAt": "2024-02-05T15:03:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOLLNO0c5mCrLv",
      "title": "Revert \"Rough Draft\"",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/4",
      "state": "MERGED",
      "author": "jessecarter111",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Reverts CIRALabs/high-assurance-dids-with-dns#1",
      "createdAt": "2024-02-05T15:56:03Z",
      "updatedAt": "2024-02-05T16:23:18Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "91193b6cb52e4da3c6003f45f28a8614d3127fdd",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "revert-1-initial-draft",
      "headRefOid": "58b029b4f76e394020b3d1a105dda10df35b40fb",
      "closedAt": "2024-02-05T15:56:11Z",
      "mergedAt": "2024-02-05T15:56:11Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "dd88cfcd66f02c845148fbaf422dba5bed77629d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 5,
      "id": "PR_kwDOLLNO0c5mCtf5",
      "title": "Deleted extra file",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/5",
      "state": "MERGED",
      "author": "jessecarter111",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-05T16:01:01Z",
      "updatedAt": "2024-02-05T16:14:31Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "dd88cfcd66f02c845148fbaf422dba5bed77629d",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "initial-draft",
      "headRefOid": "f842057b9cbde30f01359e189d68c5b09fd0aa70",
      "closedAt": "2024-02-05T16:14:27Z",
      "mergedAt": "2024-02-05T16:14:27Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "43c9da3ffd27b5a2ebd3fe3aec72c5ada3051b99"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 6,
      "id": "PR_kwDOLLNO0c5mCwwH",
      "title": "Revert \"Revert \"Rough Draft\"\"",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/6",
      "state": "MERGED",
      "author": "jessecarter111",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Reverts CIRALabs/high-assurance-dids-with-dns#4",
      "createdAt": "2024-02-05T16:07:56Z",
      "updatedAt": "2024-02-05T16:23:12Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "dd88cfcd66f02c845148fbaf422dba5bed77629d",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "revert-4-revert-1-initial-draft",
      "headRefOid": "4eb7889a4f397a48ef8d247ea750fcdefd82846f",
      "closedAt": "2024-02-05T16:08:05Z",
      "mergedAt": "2024-02-05T16:08:05Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "cca27d6f04b4fdc0655e2e322f39b7221879a2f2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 7,
      "id": "PR_kwDOLLNO0c5mDicL",
      "title": "sandbox material",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/7",
      "state": "MERGED",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I added a bunch of sandbox material in its own directory",
      "createdAt": "2024-02-05T17:55:01Z",
      "updatedAt": "2024-02-05T19:49:52Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "7a2015c68f6c50ec45b07985fe1e5b92dc6b3054",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "sandbox",
      "headRefOid": "558d608efb00c7a19cb6a32f3dff513ea8800dea",
      "closedAt": "2024-02-05T19:49:51Z",
      "mergedAt": "2024-02-05T19:49:51Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "1c93cad0d7b9646d8137a19f939f347a55f9ddb8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 8,
      "id": "PR_kwDOLLNO0c5mEscJ",
      "title": "Added Tim as an author",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/8",
      "state": "MERGED",
      "author": "jessecarter111",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-05T21:17:25Z",
      "updatedAt": "2024-02-05T21:17:32Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "1c93cad0d7b9646d8137a19f939f347a55f9ddb8",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "update-authors",
      "headRefOid": "6fa739a933d1dab1da3afca7be0f27304498e5db",
      "closedAt": "2024-02-05T21:17:32Z",
      "mergedAt": "2024-02-05T21:17:32Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "6fd7ef63b0ed906600210c61029115cbe3cf3f1e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 9,
      "id": "PR_kwDOLLNO0c5mJa50",
      "title": "Tims wip edits - I added the sections to the new target document",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/9",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-06T13:58:20Z",
      "updatedAt": "2024-02-06T16:34:38Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "6fd7ef63b0ed906600210c61029115cbe3cf3f1e",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "tims-wip-edits",
      "headRefOid": "8b13f42fb2f56110eb68ffa03a5ac38df324972f",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 10,
      "id": "PR_kwDOLLNO0c5mY5xM",
      "title": "added fastapi example",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/10",
      "state": "MERGED",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "working on a fastapi example",
      "createdAt": "2024-02-08T15:13:27Z",
      "updatedAt": "2024-02-09T20:31:48Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "6fd7ef63b0ed906600210c61029115cbe3cf3f1e",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "sandbox",
      "headRefOid": "2c46f58c0a42c9b119f520e64895fe12964c6f64",
      "closedAt": "2024-02-09T20:31:48Z",
      "mergedAt": "2024-02-09T20:31:48Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "4e4a8543d29f6b532ff8dc6744a3e3a9cc8a1da1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 11,
      "id": "PR_kwDOLLNO0c5mhYUg",
      "title": "Sandbox",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/11",
      "state": "MERGED",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "the latest",
      "createdAt": "2024-02-09T21:49:49Z",
      "updatedAt": "2024-02-09T21:52:01Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "4e4a8543d29f6b532ff8dc6744a3e3a9cc8a1da1",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "sandbox",
      "headRefOid": "430e3cc7109618fd73926ddbba835e361503de3c",
      "closedAt": "2024-02-09T21:52:00Z",
      "mergedAt": "2024-02-09T21:52:00Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "1c41bb97c33662582d37848c6e1fc6cfd11b2cb8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 13,
      "id": "PR_kwDOLLNO0c5moDgR",
      "title": "Sandbox",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/13",
      "state": "OPEN",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "latest and greatest ",
      "createdAt": "2024-02-12T11:38:20Z",
      "updatedAt": "2024-02-19T12:57:15Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "1c41bb97c33662582d37848c6e1fc6cfd11b2cb8",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "sandbox",
      "headRefOid": "5fbdd6518ffd7b1244add69f0101446a7e80c2c4",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 22,
      "id": "PR_kwDOLLNO0c5nbpER",
      "title": "Rough draft review",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/22",
      "state": "MERGED",
      "author": "jessecarter111",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-20T18:51:41Z",
      "updatedAt": "2024-02-20T18:51:48Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "1c41bb97c33662582d37848c6e1fc6cfd11b2cb8",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "rough-draft-review",
      "headRefOid": "0b9d58b65f550866b32426e9905a4e294be3239f",
      "closedAt": "2024-02-20T18:51:48Z",
      "mergedAt": "2024-02-20T18:51:48Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "749cb1b4a6b2a3b7142ffd65335facc0c53abb6e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 23,
      "id": "PR_kwDOLLNO0c5nd0XX",
      "title": "W3c proof",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/23",
      "state": "MERGED",
      "author": "jessecarter111",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-21T02:59:03Z",
      "updatedAt": "2024-02-21T03:03:00Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "749cb1b4a6b2a3b7142ffd65335facc0c53abb6e",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "w3c_proof",
      "headRefOid": "ad14877499001f6dffa39948b73547ad000ca2c8",
      "closedAt": "2024-02-21T03:03:00Z",
      "mergedAt": "2024-02-21T03:03:00Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "22d37bed8d734f332ec5e342643efb4689797a35"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 26,
      "id": "PR_kwDOLLNO0c5n8h5W",
      "title": "X509 user",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/26",
      "state": "MERGED",
      "author": "jessecarter111",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-26T17:37:07Z",
      "updatedAt": "2024-02-26T17:41:02Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "5900911e845f15601924f6311288a8f9b6617b54",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "x509_user",
      "headRefOid": "84f7d2881c579a1e0874737c102b5978b5a345ce",
      "closedAt": "2024-02-26T17:41:02Z",
      "mergedAt": "2024-02-26T17:41:02Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "45cd40eaff783d8255d866ec440c7e20ace8eef0"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 32,
      "id": "PR_kwDOLLNO0c5qTMNA",
      "title": "Review 02 26 2024",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/32",
      "state": "MERGED",
      "author": "jessecarter111",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-21T02:44:41Z",
      "updatedAt": "2024-03-21T02:44:48Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "45cd40eaff783d8255d866ec440c7e20ace8eef0",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "review-02-26-2024",
      "headRefOid": "8985652d370fbaeaa7e2eb2ff97b49c949240f7e",
      "closedAt": "2024-03-21T02:44:48Z",
      "mergedAt": "2024-03-21T02:44:48Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "1ba20ccd649fa0004389daa9e041d70a16cce075"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 33,
      "id": "PR_kwDOLLNO0c5qh6K8",
      "title": "add in DANE para",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/33",
      "state": "MERGED",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added in DANE paragraph",
      "createdAt": "2024-03-22T20:33:10Z",
      "updatedAt": "2024-04-02T17:36:36Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "7ae3b3ce18718923f52e17c6ebb8a744754bf0f1",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "DANE-additions",
      "headRefOid": "73f52878aba400e640ac7eb8e53e309888e4c88b",
      "closedAt": "2024-04-02T17:36:36Z",
      "mergedAt": "2024-04-02T17:36:36Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "4bff320092ffbf027c52be9f05f1ae48af7a2617"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 34,
      "id": "PR_kwDOLLNO0c5vHlUt",
      "title": "Non did web updates",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/34",
      "state": "MERGED",
      "author": "jessecarter111",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-10T17:03:03Z",
      "updatedAt": "2024-05-10T17:28:06Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "6ef5d5fce813d4f575941cae2a39a8f0effdf06a",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "non-did-web-updates",
      "headRefOid": "8f04af2e9db9b5077af73058b641340f8f767002",
      "closedAt": "2024-05-10T17:28:06Z",
      "mergedAt": "2024-05-10T17:28:06Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "a0b072e9805920dd5a29f1be9bbb2e7b68b8eca7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 39,
      "id": "PR_kwDOLLNO0c51iHuf",
      "title": "Minor changes",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/39",
      "state": "MERGED",
      "author": "jessecarter111",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- Change name of dnsDomain property to something more descriptive\r\n- Add explicit mention of x509 certificates\r\n- Clarify control 10",
      "createdAt": "2024-07-16T15:41:01Z",
      "updatedAt": "2024-07-17T16:18:37Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "ff5de01b94471734a40855b1dabdc15353a6b049",
      "headRepository": "CIRALabs/high-assurance-dids-with-dns",
      "headRefName": "minor-revisions",
      "headRefOid": "dfc2b1e7a20728a7d1d6b4cdb57517a8c2d5d96f",
      "closedAt": "2024-07-17T16:18:30Z",
      "mergedAt": "2024-07-17T16:18:30Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "1d80e7cdb8f82351f147160d474fbc382daf8be0"
      },
      "comments": [
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "Can we just say 'full certificate' - x509 is one of several formats and does not need special mention.",
          "createdAt": "2024-07-16T18:23:53Z",
          "updatedAt": "2024-07-16T18:23:53Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 40,
      "id": "PR_kwDOLLNO0c51iLSE",
      "title": "Control 10",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/40",
      "state": "MERGED",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "add domain zone signing key to control 10",
      "createdAt": "2024-07-16T15:49:41Z",
      "updatedAt": "2024-07-16T16:21:16Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "a0b072e9805920dd5a29f1be9bbb2e7b68b8eca7",
      "headRepository": "trbouma/high-assurance-dids-with-dns",
      "headRefName": "control_10",
      "headRefOid": "e5c71eeafc844899f2b31454f6641b84c35a6b23",
      "closedAt": "2024-07-16T16:21:16Z",
      "mergedAt": "2024-07-16T16:21:16Z",
      "mergedBy": "jessecarter111",
      "mergeCommit": {
        "oid": "ff5de01b94471734a40855b1dabdc15353a6b049"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 41,
      "id": "PR_kwDOLLNO0c51jgKa",
      "title": "add other methods",
      "url": "https://github.com/CIRALabs/high-assurance-dids-with-dns/pull/41",
      "state": "CLOSED",
      "author": "trbouma",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add section on hosting other key formats.  ",
      "createdAt": "2024-07-16T19:41:46Z",
      "updatedAt": "2024-07-17T15:18:26Z",
      "baseRepository": "CIRALabs/high-assurance-dids-with-dns",
      "baseRefName": "main",
      "baseRefOid": "ff5de01b94471734a40855b1dabdc15353a6b049",
      "headRepository": "trbouma/high-assurance-dids-with-dns",
      "headRefName": "mapping_other_records",
      "headRefOid": "b082bce024e434edf03c61f0d3bc53a65645c921",
      "closedAt": "2024-07-17T15:18:26Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "trbouma",
          "authorAssociation": "COLLABORATOR",
          "body": "after discussion, this may add to much ambiguity. Consider for future revision",
          "createdAt": "2024-07-17T15:18:26Z",
          "updatedAt": "2024-07-17T15:18:26Z"
        }
      ],
      "reviews": []
    }
  ]
}